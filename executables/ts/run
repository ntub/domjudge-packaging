#!/bin/sh

# Node.js compile wrapper-script for 'compile.sh'.
# See that script for syntax and more info.
#
# This script does not actually "compile" the source, but writes a
# shell script that will function as the executable: when called, it
# will execute the source with the correct interpreter syntax, thus
# allowing this interpreted source to be used transparantly as if it
# was compiled to a standalone binary.
#
# This scripts requires nodejs to be present in the chroot.

DEST="$1" ; shift
MEMLIMIT="$1" ; shift
MAINSOURCE="${ENTRY_POINT:-$1}"

DESTCLI="${DEST}.js"

# JS compile:
tsc --outFile ${DESTCLI} ${MAINSOURCE}
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Check for output file:
if [ ! -f "$DESTCLI" ]; then
	echo "Error: JS compiled file '$DESTCLI' not found."
	exit 1
fi

# Report the entry point, so it can be saved, e.g. for later replay:
if [ -z "$ENTRY_POINT" ]; then
	echo "Info: detected entry_point: $MAINCLASS"
fi

# Write executing script:
cat > "$DEST" <<EOF
#!/bin/sh
# Generated shell-script to execute Node interpreter on source.

# Detect dirname and change dir to prevent class not found errors.
if [ "\${0%/*}" != "\$0" ]; then
	cd "\${0%/*}"
fi

# Uncomment the line below if you want it make easier for teams to do local
# debugging.
# export ONLINE_JUDGE=1 DOMJUDGE=1

exec node "$DESTCLI" "\$@"
EOF

chmod a+x "$DEST"

exit 0
